/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import java.util.*;
import prolixa.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracoes(ADeclaracoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandos(AComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVetorDeclaracao(AVetorDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberTipo(ANumberTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnswerTipo(AAnswerTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASymbolTipo(ASymbolTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtribuicaoVarComando(AAtribuicaoVarComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtribuicaoConstComando(AAtribuicaoConstComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaptureComando(ACaptureComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShowComando(AShowComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAslongasComando(AAslongasComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConsideringComando(AConsideringComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAJustInCaseComando(AJustInCaseComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAbandonComando(AAbandonComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGotonextComando(AGotonextComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorExp(AXorExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualExp(AEqualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEqualExp(ANotEqualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessExp(ALessExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessEqualExp(ALessEqualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterExp(AGreaterExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterEqualExp(AGreaterEqualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATimesExp(ATimesExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivideExp(ADivideExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntDivideExp(AIntDivideExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpExp(AMinusExpExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumeroExp(ANumeroExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringExp(AStringExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharExp(ACharExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolExp(ABoolExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentificadorVar(AIdentificadorVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentificadorVetorVar(AIdentificadorVetorVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIs(TIs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProgram(TProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLet(TLet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUs(TUs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThatMaiusculo(TThatMaiusculo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWould(TWould node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBe(TBe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAll(TAll node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIt(TIt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPresents(TPresents node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlterable(TAlterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnalterable(TUnalterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTJust(TJust node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThatMinusculo(TThatMinusculo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConsidering(TConsidering node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnswer(TAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnswerValores(TAnswerValores node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbol(TSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVazio(TVazio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentificador(TIdentificador node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVector(TVector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBy(TBy node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOf(TOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOtherwise(TOtherwise node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGo(TGo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNext(TNext node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIteration(TIteration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCapture(TCapture node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShow(TShow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbandon(TAbandon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbreParenteses(TAbreParenteses node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFechaParenteses(TFechaParenteses node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbreColchetes(TAbreColchetes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFechaColchetes(TFechaColchetes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbreChaves(TAbreChaves node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFechaChaves(TFechaChaves node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumero(TNumero node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntermedioVetor(TIntermedioVetor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoVirgula(TPontoVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoFinal(TPontoFinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoisPontos(TDoisPontos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentario(TComentario node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarraVertical(TBarraVertical node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVinculacao(TVinculacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotEqual(TNotEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessEqual(TLessEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterEqual(TGreaterEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntDivide(TIntDivide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
