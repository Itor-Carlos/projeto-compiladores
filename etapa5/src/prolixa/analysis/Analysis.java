/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import prolixa.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseADeclaracoes(ADeclaracoes node);
    void caseAComandos(AComandos node);
    void caseAVariavelDeclaracao(AVariavelDeclaracao node);
    void caseAConstDeclaracao(AConstDeclaracao node);
    void caseAVetorDeclaracao(AVetorDeclaracao node);
    void caseANumberTipo(ANumberTipo node);
    void caseAAnswerTipo(AAnswerTipo node);
    void caseASymbolTipo(ASymbolTipo node);
    void caseAAtribuicaoVarComando(AAtribuicaoVarComando node);
    void caseAAtribuicaoConstComando(AAtribuicaoConstComando node);
    void caseACaptureComando(ACaptureComando node);
    void caseAShowComando(AShowComando node);
    void caseAAslongasComando(AAslongasComando node);
    void caseAConsideringComando(AConsideringComando node);
    void caseAJustInCaseComando(AJustInCaseComando node);
    void caseAAbandonComando(AAbandonComando node);
    void caseAGotonextComando(AGotonextComando node);
    void caseABlocoComando(ABlocoComando node);
    void caseAXorExp(AXorExp node);
    void caseAOrExp(AOrExp node);
    void caseAAndExp(AAndExp node);
    void caseAEqualExp(AEqualExp node);
    void caseANotEqualExp(ANotEqualExp node);
    void caseALessExp(ALessExp node);
    void caseALessEqualExp(ALessEqualExp node);
    void caseAGreaterExp(AGreaterExp node);
    void caseAGreaterEqualExp(AGreaterEqualExp node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseATimesExp(ATimesExp node);
    void caseADivideExp(ADivideExp node);
    void caseAIntDivideExp(AIntDivideExp node);
    void caseAMinusExpExp(AMinusExpExp node);
    void caseANotExp(ANotExp node);
    void caseANumeroExp(ANumeroExp node);
    void caseAStringExp(AStringExp node);
    void caseACharExp(ACharExp node);
    void caseAVarExp(AVarExp node);
    void caseABoolExp(ABoolExp node);
    void caseAIdentificadorVar(AIdentificadorVar node);
    void caseAIdentificadorVetorVar(AIdentificadorVetorVar node);

    void caseTThis(TThis node);
    void caseTIs(TIs node);
    void caseTProgram(TProgram node);
    void caseTLet(TLet node);
    void caseTUs(TUs node);
    void caseTBegin(TBegin node);
    void caseTThatMaiusculo(TThatMaiusculo node);
    void caseTWould(TWould node);
    void caseTBe(TBe node);
    void caseTAll(TAll node);
    void caseTIt(TIt node);
    void caseTPresents(TPresents node);
    void caseTAlterable(TAlterable node);
    void caseTUnalterable(TUnalterable node);
    void caseTJust(TJust node);
    void caseTIn(TIn node);
    void caseTCase(TCase node);
    void caseTThatMinusculo(TThatMinusculo node);
    void caseTAs(TAs node);
    void caseTLong(TLong node);
    void caseTConsidering(TConsidering node);
    void caseTNumber(TNumber node);
    void caseTAnswer(TAnswer node);
    void caseTAnswerValores(TAnswerValores node);
    void caseTSymbol(TSymbol node);
    void caseTVazio(TVazio node);
    void caseTIdentificador(TIdentificador node);
    void caseTVector(TVector node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTBy(TBy node);
    void caseTDo(TDo node);
    void caseTOf(TOf node);
    void caseTOtherwise(TOtherwise node);
    void caseTGo(TGo node);
    void caseTNext(TNext node);
    void caseTIteration(TIteration node);
    void caseTCapture(TCapture node);
    void caseTShow(TShow node);
    void caseTAbandon(TAbandon node);
    void caseTAbreParenteses(TAbreParenteses node);
    void caseTFechaParenteses(TFechaParenteses node);
    void caseTAbreColchetes(TAbreColchetes node);
    void caseTFechaColchetes(TFechaColchetes node);
    void caseTAbreChaves(TAbreChaves node);
    void caseTFechaChaves(TFechaChaves node);
    void caseTNumero(TNumero node);
    void caseTIntermedioVetor(TIntermedioVetor node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTVirgula(TVirgula node);
    void caseTString(TString node);
    void caseTPontoFinal(TPontoFinal node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTComentario(TComentario node);
    void caseTBarraVertical(TBarraVertical node);
    void caseTChar(TChar node);
    void caseTEqual(TEqual node);
    void caseTAssign(TAssign node);
    void caseTVinculacao(TVinculacao node);
    void caseTNotEqual(TNotEqual node);
    void caseTLessEqual(TLessEqual node);
    void caseTGreaterEqual(TGreaterEqual node);
    void caseTLess(TLess node);
    void caseTGreater(TGreater node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTTimes(TTimes node);
    void caseTDivide(TDivide node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTNot(TNot node);
    void caseTIntDivide(TIntDivide node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
