/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import java.util.*;
import prolixa.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getSecaoComandos() != null)
        {
            node.getSecaoComandos().apply(this);
        }
        if(node.getSecaoDeclaracoes() != null)
        {
            node.getSecaoDeclaracoes().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAPrograma(node);
    }

    public void inADeclaracoes(ADeclaracoes node)
    {
        defaultIn(node);
    }

    public void outADeclaracoes(ADeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracoes(ADeclaracoes node)
    {
        inADeclaracoes(node);
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracoes());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outADeclaracoes(node);
    }

    public void inAComandos(AComandos node)
    {
        defaultIn(node);
    }

    public void outAComandos(AComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandos(AComandos node)
    {
        inAComandos(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComandos());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAComandos(node);
    }

    public void inAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        inAVariavelDeclaracao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariavelDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inAVetorDeclaracao(AVetorDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVetorDeclaracao(AVetorDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorDeclaracao(AVetorDeclaracao node)
    {
        inAVetorDeclaracao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        {
            List<PExp> copy = new ArrayList<PExp>(node.getDimensoes());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVetorDeclaracao(node);
    }

    public void inANumberTipo(ANumberTipo node)
    {
        defaultIn(node);
    }

    public void outANumberTipo(ANumberTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTipo(ANumberTipo node)
    {
        inANumberTipo(node);
        outANumberTipo(node);
    }

    public void inAAnswerTipo(AAnswerTipo node)
    {
        defaultIn(node);
    }

    public void outAAnswerTipo(AAnswerTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnswerTipo(AAnswerTipo node)
    {
        inAAnswerTipo(node);
        outAAnswerTipo(node);
    }

    public void inASymbolTipo(ASymbolTipo node)
    {
        defaultIn(node);
    }

    public void outASymbolTipo(ASymbolTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolTipo(ASymbolTipo node)
    {
        inASymbolTipo(node);
        outASymbolTipo(node);
    }

    public void inAAtribuicaoVarComando(AAtribuicaoVarComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoVarComando(AAtribuicaoVarComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoVarComando(AAtribuicaoVarComando node)
    {
        inAAtribuicaoVarComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtribuicaoVarComando(node);
    }

    public void inAAtribuicaoConstComando(AAtribuicaoConstComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoConstComando(AAtribuicaoConstComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoConstComando(AAtribuicaoConstComando node)
    {
        inAAtribuicaoConstComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAAtribuicaoConstComando(node);
    }

    public void inACaptureComando(ACaptureComando node)
    {
        defaultIn(node);
    }

    public void outACaptureComando(ACaptureComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaptureComando(ACaptureComando node)
    {
        inACaptureComando(node);
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVariaveis());
            Collections.reverse(copy);
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outACaptureComando(node);
    }

    public void inAShowComando(AShowComando node)
    {
        defaultIn(node);
    }

    public void outAShowComando(AShowComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShowComando(AShowComando node)
    {
        inAShowComando(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExpressoes());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAShowComando(node);
    }

    public void inAAslongasComando(AAslongasComando node)
    {
        defaultIn(node);
    }

    public void outAAslongasComando(AAslongasComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAslongasComando(AAslongasComando node)
    {
        inAAslongasComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getCorpo());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        outAAslongasComando(node);
    }

    public void inAConsideringComando(AConsideringComando node)
    {
        defaultIn(node);
    }

    public void outAConsideringComando(AConsideringComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConsideringComando(AConsideringComando node)
    {
        inAConsideringComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getCorpo());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIncremento() != null)
        {
            node.getIncremento().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAConsideringComando(node);
    }

    public void inAJustInCaseComando(AJustInCaseComando node)
    {
        defaultIn(node);
    }

    public void outAJustInCaseComando(AJustInCaseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJustInCaseComando(AJustInCaseComando node)
    {
        inAJustInCaseComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getCorpo());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        outAJustInCaseComando(node);
    }

    public void inAAbandonComando(AAbandonComando node)
    {
        defaultIn(node);
    }

    public void outAAbandonComando(AAbandonComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbandonComando(AAbandonComando node)
    {
        inAAbandonComando(node);
        outAAbandonComando(node);
    }

    public void inAGotonextComando(AGotonextComando node)
    {
        defaultIn(node);
    }

    public void outAGotonextComando(AGotonextComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotonextComando(AGotonextComando node)
    {
        inAGotonextComando(node);
        outAGotonextComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComandos());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracoes());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outABlocoComando(node);
    }

    public void inAXorExp(AXorExp node)
    {
        defaultIn(node);
    }

    public void outAXorExp(AXorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExp(AXorExp node)
    {
        inAXorExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAXorExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExp(node);
    }

    public void inAEqualExp(AEqualExp node)
    {
        defaultIn(node);
    }

    public void outAEqualExp(AEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExp(AEqualExp node)
    {
        inAEqualExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqualExp(node);
    }

    public void inANotEqualExp(ANotEqualExp node)
    {
        defaultIn(node);
    }

    public void outANotEqualExp(ANotEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualExp(ANotEqualExp node)
    {
        inANotEqualExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANotEqualExp(node);
    }

    public void inALessExp(ALessExp node)
    {
        defaultIn(node);
    }

    public void outALessExp(ALessExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessExp(ALessExp node)
    {
        inALessExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALessExp(node);
    }

    public void inALessEqualExp(ALessEqualExp node)
    {
        defaultIn(node);
    }

    public void outALessEqualExp(ALessEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualExp(ALessEqualExp node)
    {
        inALessEqualExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALessEqualExp(node);
    }

    public void inAGreaterExp(AGreaterExp node)
    {
        defaultIn(node);
    }

    public void outAGreaterExp(AGreaterExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterExp(AGreaterExp node)
    {
        inAGreaterExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreaterExp(node);
    }

    public void inAGreaterEqualExp(AGreaterEqualExp node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualExp(AGreaterEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualExp(AGreaterEqualExp node)
    {
        inAGreaterEqualExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreaterEqualExp(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusExp(node);
    }

    public void inATimesExp(ATimesExp node)
    {
        defaultIn(node);
    }

    public void outATimesExp(ATimesExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesExp(ATimesExp node)
    {
        inATimesExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outATimesExp(node);
    }

    public void inADivideExp(ADivideExp node)
    {
        defaultIn(node);
    }

    public void outADivideExp(ADivideExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideExp(ADivideExp node)
    {
        inADivideExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivideExp(node);
    }

    public void inAIntDivideExp(AIntDivideExp node)
    {
        defaultIn(node);
    }

    public void outAIntDivideExp(AIntDivideExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDivideExp(AIntDivideExp node)
    {
        inAIntDivideExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAIntDivideExp(node);
    }

    public void inAMinusExpExp(AMinusExpExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExpExp(AMinusExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpExp(AMinusExpExp node)
    {
        inAMinusExpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMinusExpExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANotExp(node);
    }

    public void inANumeroExp(ANumeroExp node)
    {
        defaultIn(node);
    }

    public void outANumeroExp(ANumeroExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroExp(ANumeroExp node)
    {
        inANumeroExp(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroExp(node);
    }

    public void inAStringExp(AStringExp node)
    {
        defaultIn(node);
    }

    public void outAStringExp(AStringExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExp(AStringExp node)
    {
        inAStringExp(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringExp(node);
    }

    public void inACharExp(ACharExp node)
    {
        defaultIn(node);
    }

    public void outACharExp(ACharExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharExp(ACharExp node)
    {
        inACharExp(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp(node);
    }

    public void inABoolExp(ABoolExp node)
    {
        defaultIn(node);
    }

    public void outABoolExp(ABoolExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolExp(ABoolExp node)
    {
        inABoolExp(node);
        if(node.getAnswerValores() != null)
        {
            node.getAnswerValores().apply(this);
        }
        outABoolExp(node);
    }

    public void inAIdentificadorVar(AIdentificadorVar node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorVar(AIdentificadorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorVar(AIdentificadorVar node)
    {
        inAIdentificadorVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdentificadorVar(node);
    }

    public void inAIdentificadorVetorVar(AIdentificadorVetorVar node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorVetorVar(AIdentificadorVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorVetorVar(AIdentificadorVetorVar node)
    {
        inAIdentificadorVetorVar(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getIndices());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdentificadorVetorVar(node);
    }
}
