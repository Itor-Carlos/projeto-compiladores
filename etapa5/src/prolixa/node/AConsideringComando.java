/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import java.util.*;
import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AConsideringComando extends PComando
{
    private PVar _var_;
    private PExp _inicio_;
    private PExp _fim_;
    private PExp _incremento_;
    private final LinkedList<PComando> _corpo_ = new LinkedList<PComando>();

    public AConsideringComando()
    {
        // Constructor
    }

    public AConsideringComando(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") PExp _inicio_,
        @SuppressWarnings("hiding") PExp _fim_,
        @SuppressWarnings("hiding") PExp _incremento_,
        @SuppressWarnings("hiding") List<?> _corpo_)
    {
        // Constructor
        setVar(_var_);

        setInicio(_inicio_);

        setFim(_fim_);

        setIncremento(_incremento_);

        setCorpo(_corpo_);

    }

    @Override
    public Object clone()
    {
        return new AConsideringComando(
            cloneNode(this._var_),
            cloneNode(this._inicio_),
            cloneNode(this._fim_),
            cloneNode(this._incremento_),
            cloneList(this._corpo_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConsideringComando(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public PExp getInicio()
    {
        return this._inicio_;
    }

    public void setInicio(PExp node)
    {
        if(this._inicio_ != null)
        {
            this._inicio_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inicio_ = node;
    }

    public PExp getFim()
    {
        return this._fim_;
    }

    public void setFim(PExp node)
    {
        if(this._fim_ != null)
        {
            this._fim_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fim_ = node;
    }

    public PExp getIncremento()
    {
        return this._incremento_;
    }

    public void setIncremento(PExp node)
    {
        if(this._incremento_ != null)
        {
            this._incremento_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._incremento_ = node;
    }

    public LinkedList<PComando> getCorpo()
    {
        return this._corpo_;
    }

    public void setCorpo(List<?> list)
    {
        for(PComando e : this._corpo_)
        {
            e.parent(null);
        }
        this._corpo_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._corpo_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._inicio_)
            + toString(this._fim_)
            + toString(this._incremento_)
            + toString(this._corpo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._inicio_ == child)
        {
            this._inicio_ = null;
            return;
        }

        if(this._fim_ == child)
        {
            this._fim_ = null;
            return;
        }

        if(this._incremento_ == child)
        {
            this._incremento_ = null;
            return;
        }

        if(this._corpo_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._inicio_ == oldChild)
        {
            setInicio((PExp) newChild);
            return;
        }

        if(this._fim_ == oldChild)
        {
            setFim((PExp) newChild);
            return;
        }

        if(this._incremento_ == oldChild)
        {
            setIncremento((PExp) newChild);
            return;
        }

        for(ListIterator<PComando> i = this._corpo_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
