/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import java.util.*;
import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class ABlocoComando extends PComando
{
    private final LinkedList<PDeclaracao> _declaracoes_ = new LinkedList<PDeclaracao>();
    private final LinkedList<PComando> _comandos_ = new LinkedList<PComando>();

    public ABlocoComando()
    {
        // Constructor
    }

    public ABlocoComando(
        @SuppressWarnings("hiding") List<?> _declaracoes_,
        @SuppressWarnings("hiding") List<?> _comandos_)
    {
        // Constructor
        setDeclaracoes(_declaracoes_);

        setComandos(_comandos_);

    }

    @Override
    public Object clone()
    {
        return new ABlocoComando(
            cloneList(this._declaracoes_),
            cloneList(this._comandos_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlocoComando(this);
    }

    public LinkedList<PDeclaracao> getDeclaracoes()
    {
        return this._declaracoes_;
    }

    public void setDeclaracoes(List<?> list)
    {
        for(PDeclaracao e : this._declaracoes_)
        {
            e.parent(null);
        }
        this._declaracoes_.clear();

        for(Object obj_e : list)
        {
            PDeclaracao e = (PDeclaracao) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._declaracoes_.add(e);
        }
    }

    public LinkedList<PComando> getComandos()
    {
        return this._comandos_;
    }

    public void setComandos(List<?> list)
    {
        for(PComando e : this._comandos_)
        {
            e.parent(null);
        }
        this._comandos_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comandos_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._declaracoes_)
            + toString(this._comandos_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._declaracoes_.remove(child))
        {
            return;
        }

        if(this._comandos_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PDeclaracao> i = this._declaracoes_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclaracao) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PComando> i = this._comandos_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
