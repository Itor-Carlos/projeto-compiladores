/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.parser;

import prolixa.lexer.*;
import prolixa.node.*;
import prolixa.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AIntermedioVetorExpressoes */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AVirgulaExpressoes */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce AVariaveisVirgula */
            {
                ArrayList<Object> list = new3();
                push(goTo(3), list);
            }
            break;
            case 4: /* reduce AExpressoesVirgula */
            {
                ArrayList<Object> list = new4();
                push(goTo(4), list);
            }
            break;
            case 5: /* reduce AUnalterableValor */
            {
                ArrayList<Object> list = new5();
                push(goTo(5), list);
            }
            break;
            case 6: /* reduce AOtherwiseDoGeral */
            {
                ArrayList<Object> list = new6();
                push(goTo(6), list);
            }
            break;
            case 7: /* reduce AOtherwiseDoLoop */
            {
                ArrayList<Object> list = new7();
                push(goTo(7), list);
            }
            break;
            case 8: /* reduce AAprogramprod1ProgramProd */
            {
                ArrayList<Object> list = new8();
                push(goTo(8), list);
            }
            break;
            case 9: /* reduce AAprogramprod2ProgramProd */
            {
                ArrayList<Object> list = new9();
                push(goTo(8), list);
            }
            break;
            case 10: /* reduce AAprogramprod3ProgramProd */
            {
                ArrayList<Object> list = new10();
                push(goTo(8), list);
            }
            break;
            case 11: /* reduce AAprogramprod4ProgramProd */
            {
                ArrayList<Object> list = new11();
                push(goTo(8), list);
            }
            break;
            case 12: /* reduce ADeclaracoes */
            {
                ArrayList<Object> list = new12();
                push(goTo(9), list);
            }
            break;
            case 13: /* reduce AComandos */
            {
                ArrayList<Object> list = new13();
                push(goTo(10), list);
            }
            break;
            case 14: /* reduce AVariavelDeclaracao */
            {
                ArrayList<Object> list = new14();
                push(goTo(11), list);
            }
            break;
            case 15: /* reduce AAconstdeclaracao1Declaracao */
            {
                ArrayList<Object> list = new15();
                push(goTo(11), list);
            }
            break;
            case 16: /* reduce AAconstdeclaracao2Declaracao */
            {
                ArrayList<Object> list = new16();
                push(goTo(11), list);
            }
            break;
            case 17: /* reduce AAvetordeclaracao1Declaracao */
            {
                ArrayList<Object> list = new17();
                push(goTo(11), list);
            }
            break;
            case 18: /* reduce AAvetordeclaracao2Declaracao */
            {
                ArrayList<Object> list = new18();
                push(goTo(11), list);
            }
            break;
            case 19: /* reduce ANumberTipo */
            {
                ArrayList<Object> list = new19();
                push(goTo(12), list);
            }
            break;
            case 20: /* reduce AAnswerTipo */
            {
                ArrayList<Object> list = new20();
                push(goTo(12), list);
            }
            break;
            case 21: /* reduce ASymbolTipo */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list);
            }
            break;
            case 22: /* reduce AIdentificadorVar */
            {
                ArrayList<Object> list = new22();
                push(goTo(13), list);
            }
            break;
            case 23: /* reduce AAidentificadorvetorvar1Var */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list);
            }
            break;
            case 24: /* reduce AAidentificadorvetorvar2Var */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce AUnalt */
            {
                ArrayList<Object> list = new25();
                push(goTo(14), list);
            }
            break;
            case 26: /* reduce ASymbolValor */
            {
                ArrayList<Object> list = new26();
                push(goTo(15), list);
            }
            break;
            case 27: /* reduce AAnswerValor */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list);
            }
            break;
            case 28: /* reduce ANumeroValor */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list);
            }
            break;
            case 29: /* reduce AStringValor */
            {
                ArrayList<Object> list = new29();
                push(goTo(15), list);
            }
            break;
            case 30: /* reduce AJustInNoOtherwiseJustInCaseCompleto */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list);
            }
            break;
            case 31: /* reduce AJustInCaseLoop */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list);
            }
            break;
            case 32: /* reduce AAtribuicaoVarComandoBase */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list);
            }
            break;
            case 33: /* reduce AAtribuicaoConstComandoBase */
            {
                ArrayList<Object> list = new33();
                push(goTo(18), list);
            }
            break;
            case 34: /* reduce AAcapturecomandobase1ComandoBase */
            {
                ArrayList<Object> list = new34();
                push(goTo(18), list);
            }
            break;
            case 35: /* reduce AAcapturecomandobase2ComandoBase */
            {
                ArrayList<Object> list = new35();
                push(goTo(18), list);
            }
            break;
            case 36: /* reduce AAshowcomandobase1ComandoBase */
            {
                ArrayList<Object> list = new36();
                push(goTo(18), list);
            }
            break;
            case 37: /* reduce AAshowcomandobase2ComandoBase */
            {
                ArrayList<Object> list = new37();
                push(goTo(18), list);
            }
            break;
            case 38: /* reduce AAslongasComandoBase */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list);
            }
            break;
            case 39: /* reduce AConsideringComandoBase */
            {
                ArrayList<Object> list = new39();
                push(goTo(18), list);
            }
            break;
            case 40: /* reduce AJustComandoBase */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list);
            }
            break;
            case 41: /* reduce ABaseComandoGeral */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list);
            }
            break;
            case 42: /* reduce ABlocoComandoGeral */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list);
            }
            break;
            case 43: /* reduce AAtribuicaoVarComandoComLaco */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list);
            }
            break;
            case 44: /* reduce AAtribuicaoConstComandoComLaco */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list);
            }
            break;
            case 45: /* reduce AAcapturecomandocomlaco1ComandoComLaco */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list);
            }
            break;
            case 46: /* reduce AAcapturecomandocomlaco2ComandoComLaco */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list);
            }
            break;
            case 47: /* reduce AAshowcomandocomlaco1ComandoComLaco */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list);
            }
            break;
            case 48: /* reduce AAshowcomandocomlaco2ComandoComLaco */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list);
            }
            break;
            case 49: /* reduce AAslongasComandoComLaco */
            {
                ArrayList<Object> list = new49();
                push(goTo(20), list);
            }
            break;
            case 50: /* reduce AConsideringComandoComLaco */
            {
                ArrayList<Object> list = new50();
                push(goTo(20), list);
            }
            break;
            case 51: /* reduce AJustComandoComLaco */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list);
            }
            break;
            case 52: /* reduce AAbandonComandoComLaco */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list);
            }
            break;
            case 53: /* reduce AGotonextComandoComLaco */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list);
            }
            break;
            case 54: /* reduce ABlocoComandoComLaco */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list);
            }
            break;
            case 55: /* reduce AAbloco1Bloco */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list);
            }
            break;
            case 56: /* reduce AAbloco2Bloco */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list);
            }
            break;
            case 57: /* reduce AAbloco3Bloco */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list);
            }
            break;
            case 58: /* reduce AAbloco4Bloco */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list);
            }
            break;
            case 59: /* reduce AAblococomlaco1BlocoComLaco */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list);
            }
            break;
            case 60: /* reduce AAblococomlaco2BlocoComLaco */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list);
            }
            break;
            case 61: /* reduce AAblococomlaco3BlocoComLaco */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list);
            }
            break;
            case 62: /* reduce AAblococomlaco4BlocoComLaco */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list);
            }
            break;
            case 63: /* reduce AExp */
            {
                ArrayList<Object> list = new63();
                push(goTo(23), list);
            }
            break;
            case 64: /* reduce AXorExpXor */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list);
            }
            break;
            case 65: /* reduce ASoloExpXor */
            {
                ArrayList<Object> list = new65();
                push(goTo(24), list);
            }
            break;
            case 66: /* reduce AOrExpOr */
            {
                ArrayList<Object> list = new66();
                push(goTo(25), list);
            }
            break;
            case 67: /* reduce ASoloExpOr */
            {
                ArrayList<Object> list = new67();
                push(goTo(25), list);
            }
            break;
            case 68: /* reduce AAndExpAnd */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list);
            }
            break;
            case 69: /* reduce ASoloExpAnd */
            {
                ArrayList<Object> list = new69();
                push(goTo(26), list);
            }
            break;
            case 70: /* reduce AIgualdadeExpCmp */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list);
            }
            break;
            case 71: /* reduce ADesigualdadeExpCmp */
            {
                ArrayList<Object> list = new71();
                push(goTo(27), list);
            }
            break;
            case 72: /* reduce AMenorExpCmp */
            {
                ArrayList<Object> list = new72();
                push(goTo(27), list);
            }
            break;
            case 73: /* reduce AMenorIgualExpCmp */
            {
                ArrayList<Object> list = new73();
                push(goTo(27), list);
            }
            break;
            case 74: /* reduce AMaiorExpCmp */
            {
                ArrayList<Object> list = new74();
                push(goTo(27), list);
            }
            break;
            case 75: /* reduce AMaiorIgualExpCmp */
            {
                ArrayList<Object> list = new75();
                push(goTo(27), list);
            }
            break;
            case 76: /* reduce ASoloExpCmp */
            {
                ArrayList<Object> list = new76();
                push(goTo(27), list);
            }
            break;
            case 77: /* reduce ASomaExpTermo */
            {
                ArrayList<Object> list = new77();
                push(goTo(28), list);
            }
            break;
            case 78: /* reduce ASubExpTermo */
            {
                ArrayList<Object> list = new78();
                push(goTo(28), list);
            }
            break;
            case 79: /* reduce ASoloExpTermo */
            {
                ArrayList<Object> list = new79();
                push(goTo(28), list);
            }
            break;
            case 80: /* reduce AMulExpFator */
            {
                ArrayList<Object> list = new80();
                push(goTo(29), list);
            }
            break;
            case 81: /* reduce ADivExpFator */
            {
                ArrayList<Object> list = new81();
                push(goTo(29), list);
            }
            break;
            case 82: /* reduce ADivIntExpFator */
            {
                ArrayList<Object> list = new82();
                push(goTo(29), list);
            }
            break;
            case 83: /* reduce ASoloExpFator */
            {
                ArrayList<Object> list = new83();
                push(goTo(29), list);
            }
            break;
            case 84: /* reduce ANegativoExpUnario */
            {
                ArrayList<Object> list = new84();
                push(goTo(30), list);
            }
            break;
            case 85: /* reduce ANotExpUnario */
            {
                ArrayList<Object> list = new85();
                push(goTo(30), list);
            }
            break;
            case 86: /* reduce ASoloExpUnario */
            {
                ArrayList<Object> list = new86();
                push(goTo(30), list);
            }
            break;
            case 87: /* reduce ANumeroExpPrimario */
            {
                ArrayList<Object> list = new87();
                push(goTo(31), list);
            }
            break;
            case 88: /* reduce AStringExpPrimario */
            {
                ArrayList<Object> list = new88();
                push(goTo(31), list);
            }
            break;
            case 89: /* reduce ACharExpPrimario */
            {
                ArrayList<Object> list = new89();
                push(goTo(31), list);
            }
            break;
            case 90: /* reduce ABoolExpPrimario */
            {
                ArrayList<Object> list = new90();
                push(goTo(31), list);
            }
            break;
            case 91: /* reduce AVarExpPrimario */
            {
                ArrayList<Object> list = new91();
                push(goTo(31), list);
            }
            break;
            case 92: /* reduce AParentesesExpPrimario */
            {
                ArrayList<Object> list = new92();
                push(goTo(31), list);
            }
            break;
            case 93: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new93();
                push(goTo(32), list);
            }
            break;
            case 94: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new94();
                push(goTo(32), list);
            }
            break;
            case 95: /* reduce ATerminal$ComandoGeral */
            {
                ArrayList<Object> list = new95();
                push(goTo(33), list);
            }
            break;
            case 96: /* reduce ANonTerminal$ComandoGeral */
            {
                ArrayList<Object> list = new96();
                push(goTo(33), list);
            }
            break;
            case 97: /* reduce ATerminal$IntermedioVetorExpressoes */
            {
                ArrayList<Object> list = new97();
                push(goTo(34), list);
            }
            break;
            case 98: /* reduce ANonTerminal$IntermedioVetorExpressoes */
            {
                ArrayList<Object> list = new98();
                push(goTo(34), list);
            }
            break;
            case 99: /* reduce ATerminal$VirgulaExpressoes */
            {
                ArrayList<Object> list = new99();
                push(goTo(35), list);
            }
            break;
            case 100: /* reduce ANonTerminal$VirgulaExpressoes */
            {
                ArrayList<Object> list = new100();
                push(goTo(35), list);
            }
            break;
            case 101: /* reduce ATerminal$VariaveisVirgula */
            {
                ArrayList<Object> list = new101();
                push(goTo(36), list);
            }
            break;
            case 102: /* reduce ANonTerminal$VariaveisVirgula */
            {
                ArrayList<Object> list = new102();
                push(goTo(36), list);
            }
            break;
            case 103: /* reduce ATerminal$ExpressoesVirgula */
            {
                ArrayList<Object> list = new103();
                push(goTo(37), list);
            }
            break;
            case 104: /* reduce ANonTerminal$ExpressoesVirgula */
            {
                ArrayList<Object> list = new104();
                push(goTo(37), list);
            }
            break;
            case 105: /* reduce ATerminal$ComandoComLaco */
            {
                ArrayList<Object> list = new105();
                push(goTo(38), list);
            }
            break;
            case 106: /* reduce ANonTerminal$ComandoComLaco */
            {
                ArrayList<Object> list = new106();
                push(goTo(38), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        pprogramaNode1 = (PPrograma)nodeArrayList1.get(0);
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AIntermedioVetorExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVirgulaExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVariaveisVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AExpressoesVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AUnalterableValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AOtherwiseDoGeral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList3.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AOtherwiseDoLoop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList3.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAprogramprod1ProgramProd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidentificadorNode2 = (TIdentificador)nodeArrayList4.get(0);

        pprogramaNode1 = new APrograma(tidentificadorNode2, null, null);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAprogramprod2ProgramProd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PDeclaracoes pdeclaracoesNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidentificadorNode2 = (TIdentificador)nodeArrayList4.get(0);
        pdeclaracoesNode3 = (PDeclaracoes)nodeArrayList6.get(0);

        pprogramaNode1 = new APrograma(tidentificadorNode2, pdeclaracoesNode3, null);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAprogramprod3ProgramProd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PComandos pcomandosNode4;
        tidentificadorNode2 = (TIdentificador)nodeArrayList4.get(0);
        pcomandosNode4 = (PComandos)nodeArrayList6.get(0);

        pprogramaNode1 = new APrograma(tidentificadorNode2, null, pcomandosNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAprogramprod4ProgramProd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PDeclaracoes pdeclaracoesNode3;
        PComandos pcomandosNode4;
        tidentificadorNode2 = (TIdentificador)nodeArrayList4.get(0);
        pdeclaracoesNode3 = (PDeclaracoes)nodeArrayList6.get(0);
        pcomandosNode4 = (PComandos)nodeArrayList7.get(0);

        pprogramaNode1 = new APrograma(tidentificadorNode2, pdeclaracoesNode3, pcomandosNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracoes pdeclaracoesNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdeclaracoesNode1 = new ADeclaracoes(listNode3);
        }
	nodeList.add(pdeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList5.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcomandosNode1 = new AComandos(listNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVariavelDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TIdentificador tidentificadorNode3;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AVariavelDeclaracao(ptipoNode2, tidentificadorNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAconstdeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TIdentificador tidentificadorNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstDeclaracao(ptipoNode2, tidentificadorNode3, null);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAconstdeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TIdentificador tidentificadorNode3;
        PExp pexpNode4;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AConstDeclaracao(ptipoNode2, tidentificadorNode3, pexpNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAvetordeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TIdentificador tidentificadorNode5;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        {
            // Block
        PExp pexpNode3;
        pexpNode3 = (PExp)nodeArrayList5.get(0);
	if(pexpNode3 != null)
	{
	  listNode4.add(pexpNode3);
	}
        }
        tidentificadorNode5 = (TIdentificador)nodeArrayList7.get(0);

        pdeclaracaoNode1 = new AVetorDeclaracao(ptipoNode2, listNode4, tidentificadorNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAvetordeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TIdentificador tidentificadorNode6;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        {
            // Block
        PExp pexpNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode3 = (PExp)nodeArrayList5.get(0);
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(pexpNode3 != null)
	{
	  listNode5.add(pexpNode3);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tidentificadorNode6 = (TIdentificador)nodeArrayList8.get(0);

        pdeclaracaoNode1 = new AVetorDeclaracao(ptipoNode2, listNode5, tidentificadorNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ANumberTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block

        ptipoNode1 = new ANumberTipo();
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAnswerTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block

        ptipoNode1 = new AAnswerTipo();
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASymbolTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block

        ptipoNode1 = new ASymbolTipo();
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIdentificadorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvarNode1 = new AIdentificadorVar(tidentificadorNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAidentificadorvetorvar1Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        {
            // Block
        PExp pexpNode3;
        pexpNode3 = (PExp)nodeArrayList3.get(0);
	if(pexpNode3 != null)
	{
	  listNode4.add(pexpNode3);
	}
        }

        pvarNode1 = new AIdentificadorVetorVar(tidentificadorNode2, listNode4);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAidentificadorvetorvar2Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        {
            // Block
        PExp pexpNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(pexpNode3 != null)
	{
	  listNode5.add(pexpNode3);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pvarNode1 = new AIdentificadorVetorVar(tidentificadorNode2, listNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AUnalt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TIdentificador tidentificadorNode1;
        tidentificadorNode1 = (TIdentificador)nodeArrayList1.get(0);
	nodeList.add(tidentificadorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASymbolValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pexpNode1 = new ACharExp(tcharNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAnswerValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TAnswerValores tanswervaloresNode2;
        tanswervaloresNode2 = (TAnswerValores)nodeArrayList1.get(0);

        pexpNode1 = new ABoolExp(tanswervaloresNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANumeroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pexpNode1 = new ANumeroExp(tnumeroNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pexpNode1 = new AStringExp(tstringNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AJustInNoOtherwiseJustInCaseCompleto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList6.get(0);
        {
            // Block
        PComando pcomandoNode3;
        pcomandoNode3 = (PComando)nodeArrayList9.get(0);
	if(pcomandoNode3 != null)
	{
	  listNode4.add(pcomandoNode3);
	}
        }

        pcomandoNode1 = new AJustInCaseComando(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AJustInCaseLoop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList6.get(0);
        {
            // Block
        PComando pcomandoNode3;
        pcomandoNode3 = (PComando)nodeArrayList9.get(0);
	if(pcomandoNode3 != null)
	{
	  listNode4.add(pcomandoNode3);
	}
        }

        pcomandoNode1 = new AJustInCaseComando(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAtribuicaoVarComandoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoVarComando(pvarNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAtribuicaoConstComandoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PExp pexpNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoConstComando(tidentificadorNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAcapturecomandobase1ComandoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList3.get(0);
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }

        pcomandoNode1 = new ACaptureComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAcapturecomandobase2ComandoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PVar pvarNode3;
        listNode2 = (LinkedList)nodeArrayList3.get(0);
        pvarNode3 = (PVar)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode4.addAll(listNode2);
	}
	if(pvarNode3 != null)
	{
	  listNode4.add(pvarNode3);
	}
        }

        pcomandoNode1 = new ACaptureComando(listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAshowcomandobase1ComandoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pcomandoNode1 = new AShowComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAshowcomandobase2ComandoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        listNode2 = (LinkedList)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode4.addAll(listNode2);
	}
	if(pexpNode3 != null)
	{
	  listNode4.add(pexpNode3);
	}
        }

        pcomandoNode1 = new AShowComando(listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAslongasComandoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList5.get(0);
        {
            // Block
        PComando pcomandoNode3;
        pcomandoNode3 = (PComando)nodeArrayList8.get(0);
	if(pcomandoNode3 != null)
	{
	  listNode4.add(pcomandoNode3);
	}
        }

        pcomandoNode1 = new AAslongasComando(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AConsideringComandoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);
        pexpNode5 = (PExp)nodeArrayList8.get(0);
        {
            // Block
        PComando pcomandoNode6;
        pcomandoNode6 = (PComando)nodeArrayList10.get(0);
	if(pcomandoNode6 != null)
	{
	  listNode7.add(pcomandoNode6);
	}
        }

        pcomandoNode1 = new AConsideringComando(pvarNode2, pexpNode3, pexpNode4, pexpNode5, listNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AJustComandoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ABaseComandoGeral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ABlocoComandoGeral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAtribuicaoVarComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoVarComando(pvarNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAtribuicaoConstComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PExp pexpNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoConstComando(tidentificadorNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAcapturecomandocomlaco1ComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList3.get(0);
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }

        pcomandoNode1 = new ACaptureComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAcapturecomandocomlaco2ComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PVar pvarNode3;
        listNode2 = (LinkedList)nodeArrayList3.get(0);
        pvarNode3 = (PVar)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode4.addAll(listNode2);
	}
	if(pvarNode3 != null)
	{
	  listNode4.add(pvarNode3);
	}
        }

        pcomandoNode1 = new ACaptureComando(listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAshowcomandocomlaco1ComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pcomandoNode1 = new AShowComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAshowcomandocomlaco2ComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        listNode2 = (LinkedList)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode4.addAll(listNode2);
	}
	if(pexpNode3 != null)
	{
	  listNode4.add(pexpNode3);
	}
        }

        pcomandoNode1 = new AShowComando(listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAslongasComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList5.get(0);
        {
            // Block
        PComando pcomandoNode3;
        pcomandoNode3 = (PComando)nodeArrayList8.get(0);
	if(pcomandoNode3 != null)
	{
	  listNode4.add(pcomandoNode3);
	}
        }

        pcomandoNode1 = new AAslongasComando(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AConsideringComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);
        pexpNode5 = (PExp)nodeArrayList8.get(0);
        {
            // Block
        PComando pcomandoNode6;
        pcomandoNode6 = (PComando)nodeArrayList10.get(0);
	if(pcomandoNode6 != null)
	{
	  listNode7.add(pcomandoNode6);
	}
        }

        pcomandoNode1 = new AConsideringComando(pvarNode2, pexpNode3, pexpNode4, pexpNode5, listNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AJustComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAbandonComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block

        pcomandoNode1 = new AAbandonComando();
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AGotonextComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block

        pcomandoNode1 = new AGotonextComando();
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ABlocoComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAbloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pcomandoNode1 = new ABlocoComando(listNode2, listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAbloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pcomandoNode1 = new ABlocoComando(listNode3, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAbloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new ABlocoComando(listNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAbloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcomandoNode1 = new ABlocoComando(listNode3, listNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAblococomlaco1BlocoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pcomandoNode1 = new ABlocoComando(listNode2, listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAblococomlaco2BlocoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pcomandoNode1 = new ABlocoComando(listNode3, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAblococomlaco3BlocoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new ABlocoComando(listNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAblococomlaco4BlocoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcomandoNode1 = new ABlocoComando(listNode3, listNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AXorExpXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AXorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ASoloExpXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AOrExpOr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ASoloExpOr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAndExpAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ASoloExpAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AIgualdadeExpCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ADesigualdadeExpCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ANotEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AMenorExpCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALessExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AMenorIgualExpCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALessEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AMaiorExpCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AMaiorIgualExpCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ASoloExpCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ASomaExpTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ASubExpTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ASoloExpTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AMulExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ATimesExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ADivExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivideExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ADivIntExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AIntDivideExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ASoloExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANegativoExpUnario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AMinusExpExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANotExpUnario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ASoloExpUnario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANumeroExpPrimario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pexpNode1 = new ANumeroExp(tnumeroNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AStringExpPrimario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pexpNode1 = new AStringExp(tstringNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ACharExpPrimario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pexpNode1 = new ACharExp(tcharNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ABoolExpPrimario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TAnswerValores tanswervaloresNode2;
        tanswervaloresNode2 = (TAnswerValores)nodeArrayList1.get(0);

        pexpNode1 = new ABoolExp(tanswervaloresNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AVarExpPrimario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpNode1 = new AVarExp(pvarNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AParentesesExpPrimario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ATerminal$ComandoGeral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ANonTerminal$ComandoGeral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ATerminal$IntermedioVetorExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ANonTerminal$IntermedioVetorExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ATerminal$VirgulaExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ANonTerminal$VirgulaExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ATerminal$VariaveisVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ANonTerminal$VariaveisVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarNode2 = (PVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ATerminal$ExpressoesVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANonTerminal$ExpressoesVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ATerminal$ComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ANonTerminal$ComandoComLaco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {1, SHIFT, 4}, },
			{{-1, ERROR, 2}, {71, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {2, SHIFT, 5}, },
			{{-1, ERROR, 5}, {25, SHIFT, 6}, },
			{{-1, ERROR, 6}, {50, SHIFT, 7}, },
			{{-1, REDUCE, 8}, {3, SHIFT, 8}, {10, SHIFT, 9}, },
			{{-1, ERROR, 8}, {4, SHIFT, 12}, },
			{{-1, ERROR, 9}, {11, SHIFT, 13}, },
			{{-1, REDUCE, 9}, {3, SHIFT, 8}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 12}, {5, SHIFT, 15}, },
			{{-1, ERROR, 13}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 15}, {51, SHIFT, 17}, },
			{{-1, ERROR, 16}, {12, SHIFT, 18}, {13, SHIFT, 19}, {26, SHIFT, 20}, },
			{{-1, ERROR, 17}, {14, SHIFT, 23}, {18, SHIFT, 24}, {20, SHIFT, 25}, {25, SHIFT, 26}, {36, SHIFT, 27}, {37, SHIFT, 28}, {41, SHIFT, 29}, },
			{{-1, ERROR, 18}, {21, SHIFT, 37}, {22, SHIFT, 38}, {24, SHIFT, 39}, },
			{{-1, ERROR, 19}, {21, SHIFT, 37}, {22, SHIFT, 38}, {24, SHIFT, 39}, },
			{{-1, ERROR, 20}, {31, SHIFT, 42}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 12}, {12, SHIFT, 18}, {13, SHIFT, 19}, {26, SHIFT, 20}, },
			{{-1, ERROR, 23}, {15, SHIFT, 44}, },
			{{-1, ERROR, 24}, {19, SHIFT, 45}, },
			{{-1, ERROR, 25}, {25, SHIFT, 46}, },
			{{-1, REDUCE, 22}, {39, SHIFT, 48}, {56, REDUCE, 25}, },
			{{-1, ERROR, 27}, {39, SHIFT, 49}, },
			{{-1, ERROR, 28}, {39, SHIFT, 50}, },
			{{-1, ERROR, 29}, {12, SHIFT, 18}, {13, SHIFT, 19}, {14, SHIFT, 23}, {18, SHIFT, 24}, {20, SHIFT, 25}, {25, SHIFT, 26}, {26, SHIFT, 20}, {36, SHIFT, 27}, {37, SHIFT, 28}, {41, SHIFT, 29}, {42, SHIFT, 51}, },
			{{-1, ERROR, 30}, {55, SHIFT, 54}, },
			{{-1, ERROR, 31}, {56, SHIFT, 55}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 36}, {6, SHIFT, 56}, {14, SHIFT, 23}, {18, SHIFT, 24}, {20, SHIFT, 25}, {25, SHIFT, 26}, {36, SHIFT, 27}, {37, SHIFT, 28}, {41, SHIFT, 29}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 40}, {25, SHIFT, 58}, },
			{{-1, ERROR, 41}, {25, SHIFT, 59}, },
			{{-1, ERROR, 42}, {21, SHIFT, 37}, {22, SHIFT, 38}, {24, SHIFT, 39}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 44}, {16, SHIFT, 61}, },
			{{-1, ERROR, 45}, {18, SHIFT, 62}, },
			{{-1, REDUCE, 22}, {39, SHIFT, 48}, },
			{{-1, ERROR, 47}, {27, SHIFT, 63}, },
			{{-1, ERROR, 48}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 49}, {25, SHIFT, 46}, },
			{{-1, ERROR, 50}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 52}, {12, SHIFT, 18}, {13, SHIFT, 19}, {14, SHIFT, 23}, {18, SHIFT, 24}, {20, SHIFT, 25}, {25, SHIFT, 26}, {26, SHIFT, 20}, {36, SHIFT, 27}, {37, SHIFT, 28}, {41, SHIFT, 29}, {42, SHIFT, 87}, },
			{{-1, ERROR, 53}, {14, SHIFT, 23}, {18, SHIFT, 24}, {20, SHIFT, 25}, {25, SHIFT, 26}, {36, SHIFT, 27}, {37, SHIFT, 28}, {41, SHIFT, 29}, {42, SHIFT, 89}, },
			{{-1, ERROR, 54}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 55}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 56}, {7, SHIFT, 92}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 58}, {47, SHIFT, 93}, },
			{{-1, ERROR, 59}, {47, SHIFT, 94}, {56, SHIFT, 95}, },
			{{-1, ERROR, 60}, {39, SHIFT, 97}, },
			{{-1, ERROR, 61}, {17, SHIFT, 98}, },
			{{-1, ERROR, 62}, {39, SHIFT, 99}, },
			{{-1, ERROR, 63}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 65}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 69}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 70}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 72}, {40, SHIFT, 104}, {48, SHIFT, 105}, },
			{{-1, REDUCE, 63}, {68, SHIFT, 108}, },
			{{-1, REDUCE, 65}, {67, SHIFT, 109}, },
			{{-1, REDUCE, 67}, {66, SHIFT, 110}, },
			{{-1, REDUCE, 69}, {54, SHIFT, 111}, {57, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, {61, SHIFT, 116}, },
			{{-1, REDUCE, 76}, {62, SHIFT, 117}, {63, SHIFT, 118}, },
			{{-1, REDUCE, 79}, {64, SHIFT, 119}, {65, SHIFT, 120}, {70, SHIFT, 121}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 82}, {40, SHIFT, 122}, {48, SHIFT, 123}, },
			{{-1, ERROR, 83}, {25, SHIFT, 46}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 85}, {40, SHIFT, 126}, {48, SHIFT, 127}, },
			{{-1, ERROR, 86}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 88}, {14, SHIFT, 23}, {18, SHIFT, 24}, {20, SHIFT, 25}, {25, SHIFT, 26}, {36, SHIFT, 27}, {37, SHIFT, 28}, {41, SHIFT, 29}, {42, SHIFT, 130}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 90}, {47, SHIFT, 131}, },
			{{-1, ERROR, 91}, {47, SHIFT, 132}, },
			{{-1, ERROR, 92}, {8, SHIFT, 133}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 95}, {23, SHIFT, 134}, {45, SHIFT, 135}, {49, SHIFT, 136}, {53, SHIFT, 137}, },
			{{-1, ERROR, 96}, {47, SHIFT, 139}, },
			{{-1, ERROR, 97}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 98}, {39, SHIFT, 141}, },
			{{-1, ERROR, 99}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 100}, {28, SHIFT, 143}, },
			{{-1, ERROR, 101}, {40, SHIFT, 144}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 105}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 107}, {40, SHIFT, 146}, {48, SHIFT, 105}, },
			{{-1, ERROR, 108}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 109}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 110}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 111}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 112}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 113}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 114}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 115}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 116}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 117}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 118}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 119}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 120}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 121}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 122}, {47, SHIFT, 162}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 125}, {40, SHIFT, 163}, {48, SHIFT, 123}, },
			{{-1, ERROR, 126}, {47, SHIFT, 164}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 129}, {40, SHIFT, 165}, {48, SHIFT, 127}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 133}, {9, SHIFT, 166}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 140}, {40, SHIFT, 167}, {46, SHIFT, 168}, },
			{{-1, ERROR, 141}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 142}, {40, SHIFT, 172}, },
			{{-1, ERROR, 143}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 64}, {67, SHIFT, 109}, },
			{{-1, REDUCE, 66}, {66, SHIFT, 110}, },
			{{-1, REDUCE, 68}, {54, SHIFT, 111}, {57, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, {61, SHIFT, 116}, },
			{{-1, REDUCE, 70}, {62, SHIFT, 117}, {63, SHIFT, 118}, },
			{{-1, REDUCE, 71}, {62, SHIFT, 117}, {63, SHIFT, 118}, },
			{{-1, REDUCE, 73}, {62, SHIFT, 117}, {63, SHIFT, 118}, },
			{{-1, REDUCE, 75}, {62, SHIFT, 117}, {63, SHIFT, 118}, },
			{{-1, REDUCE, 72}, {62, SHIFT, 117}, {63, SHIFT, 118}, },
			{{-1, REDUCE, 74}, {62, SHIFT, 117}, {63, SHIFT, 118}, },
			{{-1, REDUCE, 77}, {64, SHIFT, 119}, {65, SHIFT, 120}, {70, SHIFT, 121}, },
			{{-1, REDUCE, 78}, {64, SHIFT, 119}, {65, SHIFT, 120}, {70, SHIFT, 121}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 163}, {47, SHIFT, 174}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 165}, {47, SHIFT, 175}, },
			{{-1, ERROR, 166}, {50, SHIFT, 176}, },
			{{-1, ERROR, 167}, {25, SHIFT, 177}, },
			{{-1, ERROR, 168}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 170}, {40, SHIFT, 179}, {46, SHIFT, 168}, },
			{{-1, ERROR, 171}, {40, SHIFT, 181}, },
			{{-1, ERROR, 172}, {30, SHIFT, 182}, },
			{{-1, ERROR, 173}, {29, SHIFT, 183}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 177}, {47, SHIFT, 184}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 179}, {25, SHIFT, 185}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 181}, {30, SHIFT, 186}, },
			{{-1, ERROR, 182}, {14, SHIFT, 187}, {18, SHIFT, 188}, {20, SHIFT, 189}, {25, SHIFT, 26}, {33, SHIFT, 190}, {36, SHIFT, 191}, {37, SHIFT, 192}, {38, SHIFT, 193}, {41, SHIFT, 194}, },
			{{-1, ERROR, 183}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 185}, {47, SHIFT, 201}, },
			{{-1, ERROR, 186}, {14, SHIFT, 23}, {18, SHIFT, 24}, {20, SHIFT, 25}, {25, SHIFT, 26}, {36, SHIFT, 27}, {37, SHIFT, 28}, {41, SHIFT, 29}, },
			{{-1, ERROR, 187}, {15, SHIFT, 203}, },
			{{-1, ERROR, 188}, {19, SHIFT, 204}, },
			{{-1, ERROR, 189}, {25, SHIFT, 46}, },
			{{-1, ERROR, 190}, {28, SHIFT, 206}, },
			{{-1, ERROR, 191}, {39, SHIFT, 207}, },
			{{-1, ERROR, 192}, {39, SHIFT, 208}, },
			{{-1, ERROR, 193}, {47, SHIFT, 209}, },
			{{-1, ERROR, 194}, {12, SHIFT, 18}, {13, SHIFT, 19}, {14, SHIFT, 187}, {18, SHIFT, 188}, {20, SHIFT, 189}, {25, SHIFT, 26}, {26, SHIFT, 20}, {33, SHIFT, 190}, {36, SHIFT, 191}, {37, SHIFT, 192}, {38, SHIFT, 193}, {41, SHIFT, 194}, {42, SHIFT, 210}, },
			{{-1, ERROR, 195}, {55, SHIFT, 214}, },
			{{-1, ERROR, 196}, {56, SHIFT, 215}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 200}, {30, SHIFT, 216}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 203}, {16, SHIFT, 217}, },
			{{-1, ERROR, 204}, {18, SHIFT, 218}, },
			{{-1, ERROR, 205}, {27, SHIFT, 219}, },
			{{-1, ERROR, 206}, {34, SHIFT, 220}, },
			{{-1, ERROR, 207}, {25, SHIFT, 46}, },
			{{-1, ERROR, 208}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 212}, {12, SHIFT, 18}, {13, SHIFT, 19}, {14, SHIFT, 187}, {18, SHIFT, 188}, {20, SHIFT, 189}, {25, SHIFT, 26}, {26, SHIFT, 20}, {33, SHIFT, 190}, {36, SHIFT, 191}, {37, SHIFT, 192}, {38, SHIFT, 193}, {41, SHIFT, 194}, {42, SHIFT, 225}, },
			{{-1, ERROR, 213}, {14, SHIFT, 187}, {18, SHIFT, 188}, {20, SHIFT, 189}, {25, SHIFT, 26}, {33, SHIFT, 190}, {36, SHIFT, 191}, {37, SHIFT, 192}, {38, SHIFT, 193}, {41, SHIFT, 194}, {42, SHIFT, 227}, },
			{{-1, ERROR, 214}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 215}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 216}, {14, SHIFT, 187}, {18, SHIFT, 188}, {20, SHIFT, 189}, {25, SHIFT, 26}, {33, SHIFT, 190}, {36, SHIFT, 191}, {37, SHIFT, 192}, {38, SHIFT, 193}, {41, SHIFT, 194}, },
			{{-1, ERROR, 217}, {17, SHIFT, 232}, },
			{{-1, ERROR, 218}, {39, SHIFT, 233}, },
			{{-1, ERROR, 219}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 220}, {35, SHIFT, 235}, },
			{{-1, ERROR, 221}, {40, SHIFT, 236}, {48, SHIFT, 123}, },
			{{-1, ERROR, 222}, {25, SHIFT, 46}, },
			{{-1, ERROR, 223}, {40, SHIFT, 238}, {48, SHIFT, 127}, },
			{{-1, ERROR, 224}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 226}, {14, SHIFT, 187}, {18, SHIFT, 188}, {20, SHIFT, 189}, {25, SHIFT, 26}, {33, SHIFT, 190}, {36, SHIFT, 191}, {37, SHIFT, 192}, {38, SHIFT, 193}, {41, SHIFT, 194}, {42, SHIFT, 240}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 229}, {47, SHIFT, 241}, },
			{{-1, ERROR, 230}, {47, SHIFT, 242}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 232}, {39, SHIFT, 243}, },
			{{-1, ERROR, 233}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 234}, {28, SHIFT, 245}, },
			{{-1, ERROR, 235}, {47, SHIFT, 246}, },
			{{-1, ERROR, 236}, {47, SHIFT, 247}, },
			{{-1, ERROR, 237}, {40, SHIFT, 248}, {48, SHIFT, 123}, },
			{{-1, ERROR, 238}, {47, SHIFT, 249}, },
			{{-1, ERROR, 239}, {40, SHIFT, 250}, {48, SHIFT, 127}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 243}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 244}, {40, SHIFT, 252}, },
			{{-1, ERROR, 245}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 248}, {47, SHIFT, 254}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 250}, {47, SHIFT, 255}, },
			{{-1, ERROR, 251}, {40, SHIFT, 256}, },
			{{-1, ERROR, 252}, {30, SHIFT, 257}, },
			{{-1, ERROR, 253}, {29, SHIFT, 258}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 256}, {30, SHIFT, 259}, },
			{{-1, ERROR, 257}, {14, SHIFT, 187}, {18, SHIFT, 188}, {20, SHIFT, 189}, {25, SHIFT, 26}, {33, SHIFT, 190}, {36, SHIFT, 191}, {37, SHIFT, 192}, {38, SHIFT, 193}, {41, SHIFT, 194}, },
			{{-1, ERROR, 258}, {23, SHIFT, 64}, {25, SHIFT, 46}, {39, SHIFT, 65}, {45, SHIFT, 66}, {49, SHIFT, 67}, {53, SHIFT, 68}, {63, SHIFT, 69}, {69, SHIFT, 70}, },
			{{-1, ERROR, 259}, {14, SHIFT, 187}, {18, SHIFT, 188}, {20, SHIFT, 189}, {25, SHIFT, 26}, {33, SHIFT, 190}, {36, SHIFT, 191}, {37, SHIFT, 192}, {38, SHIFT, 193}, {41, SHIFT, 194}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 261}, {30, SHIFT, 263}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 263}, {14, SHIFT, 187}, {18, SHIFT, 188}, {20, SHIFT, 189}, {25, SHIFT, 26}, {33, SHIFT, 190}, {36, SHIFT, 191}, {37, SHIFT, 192}, {38, SHIFT, 193}, {41, SHIFT, 194}, },
			{{-1, REDUCE, 50}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 169}, {170, 180}, },
			{{-1, 106}, {107, 147}, },
			{{-1, 81}, {83, 124}, {222, 124}, },
			{{-1, 84}, {86, 128}, {224, 128}, },
			{{-1, 96}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 3}, },
			{{-1, 10}, },
			{{-1, 11}, {10, 14}, },
			{{-1, 21}, {22, 43}, {52, 43}, {212, 43}, },
			{{-1, 40}, {19, 41}, {42, 60}, },
			{{-1, 71}, {17, 30}, {25, 47}, {29, 30}, {36, 30}, {49, 82}, {52, 30}, {53, 30}, {83, 125}, {88, 30}, {182, 195}, {186, 30}, {189, 205}, {194, 195}, {207, 221}, {212, 195}, {213, 195}, {216, 195}, {222, 237}, {226, 195}, {257, 195}, {259, 195}, {263, 195}, },
			{{-1, 196}, {17, 31}, {29, 31}, {36, 31}, {52, 31}, {53, 31}, {88, 31}, {186, 31}, },
			{{-1, 138}, },
			{{-1, 32}, },
			{{-1, 197}, },
			{{-1, 33}, },
			{{-1, 34}, {36, 57}, {53, 57}, {88, 57}, {186, 202}, },
			{{-1, 211}, {182, 198}, {213, 228}, {216, 231}, {226, 228}, {257, 260}, {259, 262}, {263, 264}, },
			{{-1, 35}, },
			{{-1, 199}, },
			{{-1, 72}, {50, 85}, {54, 90}, {55, 91}, {63, 100}, {65, 101}, {86, 129}, {97, 140}, {99, 142}, {105, 145}, {141, 171}, {143, 173}, {168, 178}, {183, 200}, {208, 223}, {214, 229}, {215, 230}, {219, 234}, {224, 239}, {233, 244}, {243, 251}, {245, 253}, {258, 261}, },
			{{-1, 73}, },
			{{-1, 74}, {108, 148}, },
			{{-1, 75}, {109, 149}, },
			{{-1, 76}, {110, 150}, },
			{{-1, 77}, {111, 151}, {112, 152}, {113, 153}, {114, 154}, {115, 155}, {116, 156}, },
			{{-1, 78}, {117, 157}, {118, 158}, },
			{{-1, 79}, {69, 102}, {70, 103}, {119, 159}, {120, 160}, {121, 161}, },
			{{-1, 80}, },
			{{-1, 22}, {29, 52}, {194, 212}, },
			{{-1, 36}, {29, 53}, {52, 88}, },
			{{-1, 170}, },
			{{-1, 107}, },
			{{-1, 83}, {207, 222}, },
			{{-1, 86}, {208, 224}, },
			{{-1, 213}, {212, 226}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'This'",
			"expecting: 'is'",
			"expecting: EOF",
			"expecting: 'program'",
			"expecting: identificador",
			"expecting: '.'",
			"expecting: 'Let', 'It', EOF",
			"expecting: 'us'",
			"expecting: 'presents'",
			"expecting: 'Let', EOF",
			"expecting: 'begin'",
			"expecting: ':'",
			"expecting: 'alterable', 'unalterable', 'vector'",
			"expecting: 'just', 'as', 'considering', identificador, 'capture', 'show', '['",
			"expecting: 'number', 'answer', 'symbol'",
			"expecting: 'of'",
			"expecting: 'Let', 'alterable', 'unalterable', 'just', 'as', 'considering', identificador, 'vector', 'go', 'capture', 'show', 'abandon', '[', ']', EOF",
			"expecting: 'Let', 'alterable', 'unalterable', 'vector', EOF",
			"expecting: 'in'",
			"expecting: 'long'",
			"expecting: '(', ':=', '='",
			"expecting: '('",
			"expecting: 'alterable', 'unalterable', 'just', 'as', 'considering', identificador, 'vector', 'capture', 'show', '[', ']'",
			"expecting: ':='",
			"expecting: '='",
			"expecting: 'That', 'just', 'as', 'considering', identificador, 'capture', 'show', '[', ']'",
			"expecting: 'That', 'just', 'as', 'considering', identificador, 'capture', 'show', '['",
			"expecting: identificador, '('",
			"expecting: 'case'",
			"expecting: 'as'",
			"expecting: 'from', 'to', 'by', 'do', '(', ')', 'x', ';', ',', '==', '!=', '<=', '>=', '<', '>', '+', '-', '*', '/', 'and', 'or', 'xor', '//'",
			"expecting: 'from'",
			"expecting: answer valores, identificador, '(', numero, string, char, '-', '!'",
			"expecting: 'just', 'as', 'considering', identificador, 'capture', 'show', '[', ']'",
			"expecting: 'would'",
			"expecting: ';'",
			"expecting: ';', '='",
			"expecting: 'that'",
			"expecting: 'to', 'by', 'do', ')', 'x', ';', ',', '==', '!=', '<=', '>=', '<', '>', '+', '-', '*', '/', 'and', 'or', 'xor', '//'",
			"expecting: ')', ','",
			"expecting: 'to', 'by', 'do', ')', 'x', ';', ',', 'xor'",
			"expecting: 'to', 'by', 'do', ')', 'x', ';', ',', 'or', 'xor'",
			"expecting: 'to', 'by', 'do', ')', 'x', ';', ',', 'and', 'or', 'xor'",
			"expecting: 'to', 'by', 'do', ')', 'x', ';', ',', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'xor'",
			"expecting: 'to', 'by', 'do', ')', 'x', ';', ',', '==', '!=', '<=', '>=', '<', '>', '+', '-', 'and', 'or', 'xor'",
			"expecting: 'be'",
			"expecting: answer valores, numero, string, char",
			"expecting: 'to'",
			"expecting: ')'",
			"expecting: 'from', 'to', 'by', 'do', ')', 'x', ';', ',', '==', ':=', '!=', '<=', '>=', '<', '>', '+', '-', '*', '/', 'and', 'or', 'xor', '//'",
			"expecting: 'all'",
			"expecting: ')', 'x'",
			"expecting: 'do'",
			"expecting: 'by'",
			"expecting: 'just', 'as', 'considering', identificador, 'go', 'capture', 'show', 'abandon', '['",
			"expecting: 'alterable', 'unalterable', 'just', 'as', 'considering', identificador, 'vector', 'go', 'capture', 'show', 'abandon', '[', ']'",
			"expecting: 'That', 'just', 'as', 'considering', identificador, 'go', 'capture', 'show', 'abandon', '[', ']'",
			"expecting: 'next'",
			"expecting: 'just', 'as', 'considering', identificador, 'go', 'capture', 'show', 'abandon', '[', ']'",
			"expecting: 'iteration'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 2, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 4, 20, 21, 21, 22, 23, 24, 25, 25, 25, 25, 26, 27, 27, 27, 4, 4, 14, 16, 28, 29, 30, 31, 32, 4, 32, 25, 22, 33, 32, 32, 34, 25, 35, 36, 21, 37, 21, 32, 38, 32, 38, 38, 38, 32, 32, 38, 39, 40, 41, 42, 43, 44, 38, 38, 38, 4, 39, 4, 32, 39, 32, 25, 33, 25, 35, 35, 45, 16, 16, 46, 35, 32, 21, 32, 47, 48, 38, 38, 49, 32, 39, 39, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 4, 4, 39, 35, 32, 32, 39, 25, 25, 25, 50, 35, 35, 35, 35, 35, 16, 51, 32, 48, 32, 38, 39, 49, 39, 41, 42, 43, 44, 44, 44, 44, 44, 44, 38, 38, 38, 38, 38, 25, 35, 25, 35, 5, 4, 32, 51, 51, 48, 52, 53, 25, 25, 2, 35, 51, 4, 51, 52, 54, 32, 16, 35, 13, 18, 19, 4, 47, 21, 21, 35, 55, 23, 24, 56, 25, 56, 52, 16, 25, 28, 29, 31, 57, 4, 32, 56, 56, 58, 55, 58, 32, 32, 54, 37, 21, 32, 59, 39, 4, 39, 32, 56, 58, 56, 58, 35, 35, 25, 21, 32, 47, 35, 35, 39, 35, 39, 56, 56, 56, 32, 48, 32, 56, 56, 35, 56, 35, 48, 52, 53, 56, 56, 52, 54, 32, 54, 56, 52, 56, 54, 56, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
